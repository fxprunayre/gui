// This file is auto-generated by @hey-api/openapi-ts

export const $Address = {
    type: 'object',
    properties: {
        address: {
            type: 'string'
        },
        city: {
            type: 'string'
        },
        country: {
            type: 'string'
        },
        id: {
            type: 'integer',
            format: 'int32'
        },
        state: {
            type: 'string'
        },
        zip: {
            type: 'string'
        }
    }
} as const;

export const $AnonymousMapserver = {
    type: 'object',
    properties: {
        configurl: {
            type: 'string'
        },
        description: {
            type: 'string'
        },
        id: {
            type: 'integer',
            format: 'int32'
        },
        name: {
            type: 'string'
        },
        namespace: {
            type: 'string'
        },
        namespacePrefix: {
            type: 'string'
        },
        password: {
            type: 'string'
        },
        pushStyleInWorkspace: {
            '$ref': '#/components/schemas/MapServer'
        },
        pushStyleInWorkspace_JpaWorkaround: {
            type: 'string',
            writeOnly: true
        },
        stylerurl: {
            type: 'string'
        },
        username: {
            type: 'string'
        },
        wcsurl: {
            type: 'string'
        },
        wfsurl: {
            type: 'string'
        },
        wmsurl: {
            type: 'string'
        }
    }
} as const;

export const $Associated = {
    type: 'object',
    properties: {
        item: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AssociatedSiblingMetadataItem'
            }
        }
    }
} as const;

export const $AssociatedRecord = {
    type: 'object',
    properties: {
        _id: {
            type: 'string'
        },
        _source: {
            '$ref': '#/components/schemas/JsonNode'
        },
        origin: {
            type: 'string'
        },
        properties: {
            type: 'object',
            additionalProperties: {
                type: 'string'
            }
        }
    }
} as const;

export const $AssociatedSiblingMetadataItem = {
    required: ['description', 'mdType', 'title'],
    type: 'object',
    properties: {
        agg_isDescriptionOf: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        agg_isTemporalStatOf: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        agg_largerWorkCitation: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        description: {
            '$ref': '#/components/schemas/Description'
        },
        hash: {
            type: 'string'
        },
        id: {
            type: 'string'
        },
        idx: {
            type: 'string'
        },
        mdType: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        origin: {
            type: 'string'
        },
        title: {
            '$ref': '#/components/schemas/MultilingualValue'
        },
        type: {
            type: 'string'
        },
        url: {
            '$ref': '#/components/schemas/MultilingualValue'
        }
    }
} as const;

export const $AttributeTable = {
    type: 'object',
    properties: {
        element: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/FCRelatedElement'
            }
        }
    }
} as const;

export const $BatchEditParameter = {
    required: ['value', 'xpath'],
    type: 'object',
    properties: {
        condition: {
            type: 'string'
        },
        value: {
            type: 'string'
        },
        xpath: {
            type: 'string'
        }
    },
    xml: {
        name: 'edit'
    }
} as const;

export const $BatchEditing = {
    required: ['section'],
    type: 'object',
    properties: {
        section: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Section'
            }
        }
    },
    xml: {
        name: 'batchEditing'
    }
} as const;

export const $Category = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            xml: {
                attribute: true
            }
        },
        label: {
            type: 'string',
            xml: {
                attribute: true
            }
        }
    }
} as const;

export const $CategoryResponse = {
    type: 'object',
    properties: {
        label: {
            type: 'object',
            additionalProperties: {
                type: 'string'
            }
        }
    }
} as const;

export const $Children = {
    type: 'object',
    properties: {
        item: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/RelatedMetadataItem'
            }
        }
    }
} as const;

export const $Codelist = {
    type: 'object',
    properties: {
        alias: {
            type: 'string',
            xml: {
                attribute: true
            }
        },
        entry: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Entry'
            }
        },
        name: {
            type: 'string',
            xml: {
                attribute: true
            }
        }
    },
    xml: {
        name: 'codelist'
    }
} as const;

export const $Crs = {
    type: 'object',
    properties: {
        authority: {
            type: 'string'
        },
        code: {
            type: 'string'
        },
        codeSpace: {
            type: 'string'
        },
        description: {
            type: 'string'
        },
        version: {
            type: 'string'
        }
    }
} as const;

export const $Dataset = {
    type: 'object',
    properties: {
        item: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/RelatedMetadataItem'
            }
        }
    }
} as const;

export const $Description = {
    type: 'object',
    properties: {
        value: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/LocalizedString'
            }
        }
    }
} as const;

export const $Direction = {
    type: 'string',
    enum: ['up', 'down']
} as const;

export const $Element = {
    required: ['label'],
    type: 'object',
    properties: {
        condition: {
            type: 'string'
        },
        context: {
            type: 'string',
            xml: {
                attribute: true
            }
        },
        description: {
            type: 'string'
        },
        example: {
            type: 'string'
        },
        help: {
            type: 'string'
        },
        helper: {
            '$ref': '#/components/schemas/Helper'
        },
        id: {
            type: 'number',
            xml: {
                attribute: true
            }
        },
        label: {
            type: 'string'
        },
        name: {
            type: 'string',
            xml: {
                attribute: true
            }
        }
    },
    xml: {
        name: 'element'
    }
} as const;

export const $Entry = {
    required: ['code', 'description', 'label'],
    type: 'object',
    properties: {
        code: {
            type: 'string'
        },
        description: {
            type: 'string'
        },
        hideInEditMode: {
            type: 'string',
            xml: {
                attribute: true
            }
        },
        label: {
            type: 'string'
        }
    },
    xml: {
        name: 'entry'
    }
} as const;

export const $ExtentDto = {
    type: 'object',
    properties: {
        description: {
            type: 'string'
        },
        href: {
            type: 'string'
        },
        type: {
            type: 'string'
        },
        xpath: {
            type: 'string'
        }
    }
} as const;

export const $FCRelatedElement = {
    type: 'object',
    properties: {
        code: {
            type: 'string'
        },
        definition: {
            type: 'string'
        },
        link: {
            type: 'string'
        },
        name: {
            type: 'string'
        },
        type: {
            type: 'string'
        },
        values: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Values'
            }
        }
    }
} as const;

export const $FCRelatedMetadataItem = {
    required: ['description', 'featureType', 'mdType', 'title'],
    type: 'object',
    properties: {
        description: {
            '$ref': '#/components/schemas/Description'
        },
        featureType: {
            '$ref': '#/components/schemas/FeatureType'
        },
        hash: {
            type: 'string'
        },
        id: {
            type: 'string'
        },
        idx: {
            type: 'string'
        },
        mdType: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        origin: {
            type: 'string'
        },
        title: {
            '$ref': '#/components/schemas/MultilingualValue'
        },
        type: {
            type: 'string'
        },
        url: {
            '$ref': '#/components/schemas/MultilingualValue'
        }
    }
} as const;

export const $Fcat = {
    type: 'object',
    properties: {
        item: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/FCRelatedMetadataItem'
            }
        }
    }
} as const;

export const $FeatureResponse = {
    type: 'object',
    properties: {
        decodeMap: {
            type: 'object',
            additionalProperties: {
                type: 'array',
                items: {
                    type: 'string'
                }
            }
        }
    },
    xml: {
        name: 'related'
    }
} as const;

export const $FeatureType = {
    type: 'object',
    properties: {
        attributeTable: {
            '$ref': '#/components/schemas/AttributeTable'
        }
    }
} as const;

export const $Field = {
    type: 'object',
    properties: {
        codelist: {
            type: 'string',
            xml: {
                attribute: true
            }
        },
        indexField: {
            type: 'string',
            xml: {
                attribute: true
            }
        },
        insertMode: {
            type: 'string',
            xml: {
                attribute: true
            }
        },
        name: {
            type: 'string',
            xml: {
                attribute: true
            }
        },
        removable: {
            type: 'boolean',
            xml: {
                attribute: true
            }
        },
        template: {
            type: 'string'
        },
        use: {
            type: 'string',
            xml: {
                attribute: true
            }
        },
        xpath: {
            type: 'string',
            xml: {
                attribute: true
            }
        }
    }
} as const;

export const $FormatterData = {
    type: 'object',
    properties: {
        id: {
            type: 'string'
        },
        schema: {
            type: 'string'
        }
    },
    xml: {
        name: 'formatter'
    }
} as const;

export const $FormatterDataResponse = {
    type: 'object',
    properties: {
        formatters: {
            type: 'array',
            xml: {
                name: 'formatter'
            },
            items: {
                '$ref': '#/components/schemas/FormatterData'
            }
        }
    },
    xml: {
        name: 'formatters'
    }
} as const;

export const $GrantedAuthority = {
    type: 'object',
    properties: {
        authority: {
            type: 'string'
        }
    }
} as const;

export const $Group = {
    type: 'object',
    properties: {
        allowedCategories: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/MetadataCategory'
            }
        },
        defaultCategory: {
            '$ref': '#/components/schemas/MetadataCategory'
        },
        description: {
            type: 'string'
        },
        email: {
            type: 'string'
        },
        enableAllowedCategories: {
            type: 'boolean'
        },
        id: {
            type: 'integer',
            format: 'int32'
        },
        label: {
            type: 'object',
            additionalProperties: {
                type: 'string'
            }
        },
        logo: {
            type: 'string'
        },
        name: {
            type: 'string'
        },
        referrer: {
            type: 'integer',
            format: 'int32'
        },
        reserved: {
            type: 'boolean'
        },
        website: {
            type: 'string'
        }
    },
    description: 'Group details'
} as const;

export const $GroupOperations = {
    type: 'object',
    properties: {
        group: {
            type: 'integer',
            format: 'int32'
        },
        operations: {
            type: 'object',
            additionalProperties: {
                type: 'boolean'
            }
        }
    }
} as const;

export const $GroupPrivilege = {
    type: 'object',
    properties: {
        group: {
            type: 'integer',
            format: 'int32'
        },
        operations: {
            type: 'object',
            additionalProperties: {
                type: 'boolean'
            }
        },
        reserved: {
            type: 'boolean'
        },
        userGroup: {
            type: 'boolean'
        },
        userProfile: {
            type: 'array',
            writeOnly: true,
            items: {
                type: 'string',
                enum: ['Administrator', 'UserAdmin', 'Reviewer', 'Editor', 'RegisteredUser', 'Guest', 'Monitor']
            }
        },
        userProfiles: {
            type: 'array',
            items: {
                type: 'string',
                enum: ['Administrator', 'UserAdmin', 'Reviewer', 'Editor', 'RegisteredUser', 'Guest', 'Monitor']
            }
        }
    }
} as const;

export const $Hasfeaturecats = {
    type: 'object',
    properties: {
        item: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/RelatedMetadataItem'
            }
        }
    }
} as const;

export const $Hassource = {
    type: 'object',
    properties: {
        item: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/RelatedMetadataItem'
            }
        }
    }
} as const;

export const $Helper = {
    required: ['option'],
    type: 'object',
    properties: {
        displayIf: {
            type: 'string',
            xml: {
                attribute: true
            }
        },
        editorMode: {
            type: 'string',
            xml: {
                attribute: true
            }
        },
        option: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Option'
            }
        },
        rel: {
            type: 'string',
            xml: {
                attribute: true
            }
        },
        relAtt: {
            type: 'string',
            xml: {
                attribute: true
            }
        },
        sort: {
            type: 'boolean',
            xml: {
                attribute: true
            }
        }
    },
    xml: {
        name: 'helper'
    }
} as const;

export const $IProcessingReport = {
    type: 'object',
    properties: {
        ellapsedTimeInSeconds: {
            type: 'integer',
            format: 'int64'
        },
        endIsoDateTime: {
            type: 'string'
        },
        running: {
            type: 'boolean'
        },
        startIsoDateTime: {
            type: 'string'
        },
        totalTimeInSeconds: {
            type: 'integer',
            format: 'int64'
        },
        type: {
            type: 'string'
        },
        uuid: {
            type: 'string'
        }
    }
} as const;

export const $ISODate = {
    type: 'object',
    properties: {
        dateAndTime: {
            type: 'string'
        },
        dateAndTimeUtc: {
            type: 'string'
        },
        dateAsString: {
            type: 'string'
        },
        dateOnly: {
            type: 'boolean'
        },
        dateYearMonthOnly: {
            type: 'boolean'
        },
        dateYearOnly: {
            type: 'boolean'
        },
        days: {
            type: 'integer',
            format: 'int32'
        },
        hours: {
            type: 'integer',
            format: 'int32'
        },
        internalDateTime: {
            type: 'string',
            format: 'date-time'
        },
        minutes: {
            type: 'integer',
            format: 'int32'
        },
        months: {
            type: 'integer',
            format: 'int32'
        },
        seconds: {
            type: 'integer',
            format: 'int32'
        },
        timeAsString: {
            type: 'string'
        },
        timeInSeconds: {
            type: 'integer',
            format: 'int64'
        },
        years: {
            type: 'integer',
            format: 'int32'
        }
    }
} as const;

export const $IndexResponse = {
    type: 'object',
    properties: {
        count: {
            type: 'integer',
            format: 'int32'
        },
        success: {
            type: 'boolean'
        }
    }
} as const;

export const $InfoReport = {
    type: 'object',
    properties: {
        approved: {
            type: 'boolean'
        },
        date: {
            type: 'string',
            xml: {
                name: 'datetime'
            }
        },
        draft: {
            type: 'boolean'
        },
        message: {
            type: 'string'
        },
        uuid: {
            type: 'string'
        }
    }
} as const;

export const $IsoLanguage = {
    type: 'object',
    properties: {
        code: {
            type: 'string'
        },
        id: {
            type: 'integer',
            format: 'int32'
        },
        label: {
            type: 'object',
            additionalProperties: {
                type: 'string'
            }
        },
        shortCode: {
            type: 'string'
        }
    }
} as const;

export const $JsonNode = {
    type: 'object'
} as const;

export const $Language = {
    type: 'object',
    properties: {
        id: {
            type: 'string'
        },
        inspire: {
            type: 'boolean'
        },
        inspire_JPAWorkaround: {
            type: 'string',
            writeOnly: true
        },
        name: {
            type: 'string'
        }
    }
} as const;

export const $Link = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int32'
        },
        lastCheck: {
            '$ref': '#/components/schemas/ISODate'
        },
        lastState: {
            type: 'integer',
            format: 'int32'
        },
        linkStatus: {
            uniqueItems: true,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/LinkStatus'
            }
        },
        linkType: {
            type: 'string',
            enum: ['HTTP', 'METADATA']
        },
        protocol: {
            type: 'string'
        },
        records: {
            uniqueItems: true,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/MetadataLink'
            }
        },
        url: {
            type: 'string'
        }
    }
} as const;

export const $LinkFilter = {
    type: 'object',
    properties: {
        lastState: {
            type: 'string'
        },
        records: {
            type: 'string'
        },
        url: {
            type: 'string'
        }
    }
} as const;

export const $LinkStatus = {
    type: 'object',
    properties: {
        batchKey: {
            type: 'string'
        },
        checkDate: {
            '$ref': '#/components/schemas/ISODate'
        },
        failing: {
            type: 'boolean'
        },
        id: {
            type: 'integer',
            format: 'int32'
        },
        statusInfo: {
            type: 'string'
        },
        statusValue: {
            type: 'string'
        }
    }
} as const;

export const $ListRegionsResponse = {
    type: 'object',
    properties: {
        categories: {
            type: 'object',
            additionalProperties: {
                '$ref': '#/components/schemas/CategoryResponse'
            }
        },
        count: {
            type: 'integer',
            format: 'int32',
            xml: {
                attribute: true
            }
        },
        region: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/RegionResponse'
            }
        },
        regions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/RegionResponse'
            }
        }
    },
    xml: {
        name: 'response'
    }
} as const;

export const $LocalizedString = {
    type: 'object',
    properties: {
        href: {
            type: 'string',
            xml: {
                attribute: true
            }
        },
        lang: {
            type: 'string',
            xml: {
                attribute: true
            }
        },
        value: {
            type: 'string'
        }
    }
} as const;

export const $LogFileResponse = {
    type: 'object',
    properties: {
        file: {
            type: 'string',
            xml: {
                attribute: true
            }
        },
        name: {
            type: 'string',
            xml: {
                attribute: true
            }
        }
    }
} as const;

export const $MapServer = {
    type: 'object',
    properties: {
        configurl: {
            type: 'string'
        },
        description: {
            type: 'string'
        },
        id: {
            type: 'integer',
            format: 'int32'
        },
        name: {
            type: 'string'
        },
        namespace: {
            type: 'string'
        },
        namespacePrefix: {
            type: 'string'
        },
        password: {
            type: 'string'
        },
        pushStyleInWorkspace: {
            '$ref': '#/components/schemas/MapServer'
        },
        pushStyleInWorkspace_JpaWorkaround: {
            type: 'string',
            writeOnly: true
        },
        stylerurl: {
            type: 'string'
        },
        username: {
            type: 'string'
        },
        wcsurl: {
            type: 'string'
        },
        wfsurl: {
            type: 'string'
        },
        wmsurl: {
            type: 'string'
        }
    },
    description: 'Mapserver details'
} as const;

export const $MapService = {
    type: 'object',
    properties: {
        authType: {
            type: 'string'
        },
        url: {
            type: 'string'
        },
        urlType: {
            type: 'string'
        },
        useProxy: {
            type: 'boolean'
        }
    }
} as const;

export const $MeResponse = {
    type: 'object',
    properties: {
        admin: {
            type: 'boolean'
        },
        email: {
            type: 'string'
        },
        groupsWithEditor: {
            type: 'array',
            items: {
                type: 'integer',
                format: 'int32'
            }
        },
        groupsWithRegisteredUser: {
            type: 'array',
            items: {
                type: 'integer',
                format: 'int32'
            }
        },
        groupsWithReviewer: {
            type: 'array',
            items: {
                type: 'integer',
                format: 'int32'
            }
        },
        groupsWithUserAdmin: {
            type: 'array',
            items: {
                type: 'integer',
                format: 'int32'
            }
        },
        hash: {
            type: 'string'
        },
        id: {
            type: 'string'
        },
        name: {
            type: 'string'
        },
        organisation: {
            type: 'string'
        },
        profile: {
            type: 'string'
        },
        surname: {
            type: 'string'
        },
        username: {
            type: 'string'
        }
    }
} as const;

export const $MetadataBatchApproveParameter = {
    type: 'object',
    properties: {
        bucket: {
            type: 'string'
        },
        directApproval: {
            type: 'boolean'
        },
        message: {
            type: 'string'
        },
        uuids: {
            type: 'array',
            items: {
                type: 'string'
            }
        }
    }
} as const;

export const $MetadataBatchSubmitParameter = {
    type: 'object',
    properties: {
        bucket: {
            type: 'string'
        },
        message: {
            type: 'string'
        },
        uuids: {
            type: 'array',
            items: {
                type: 'string'
            }
        }
    }
} as const;

export const $MetadataCategory = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int32'
        },
        label: {
            type: 'object',
            additionalProperties: {
                type: 'string'
            }
        },
        name: {
            type: 'string'
        }
    }
} as const;

export const $MetadataIdentifierTemplate = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int32'
        },
        name: {
            type: 'string'
        },
        systemDefault: {
            type: 'boolean',
            writeOnly: true
        },
        systemProvided: {
            type: 'boolean'
        },
        systemProvided_JPAWorkaround: {
            type: 'string',
            writeOnly: true
        },
        template: {
            type: 'string'
        }
    },
    description: 'Identifier template details'
} as const;

export const $MetadataLink = {
    type: 'object',
    properties: {
        metadataId: {
            type: 'integer',
            format: 'int32'
        },
        metadataUuid: {
            type: 'string'
        }
    }
} as const;

export const $MetadataProcessingReport = {
    type: 'object',
    properties: {
        ellapsedTimeInSeconds: {
            type: 'integer',
            format: 'int64',
            xml: {
                attribute: true
            }
        },
        endIsoDateTime: {
            type: 'string',
            xml: {
                attribute: true
            }
        },
        errors: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Report'
            }
        },
        infos: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/InfoReport'
            }
        },
        metadata: {
            uniqueItems: true,
            type: 'array',
            items: {
                type: 'integer',
                format: 'int32'
            }
        },
        metadataErrors: {
            type: 'object',
            additionalProperties: {
                type: 'array',
                items: {
                    '$ref': '#/components/schemas/Report'
                }
            },
            xml: {
                name: 'errors'
            }
        },
        metadataInfos: {
            type: 'object',
            additionalProperties: {
                type: 'array',
                items: {
                    '$ref': '#/components/schemas/InfoReport'
                }
            },
            xml: {
                name: 'infos'
            }
        },
        numberOfNullRecords: {
            type: 'integer',
            format: 'int32'
        },
        numberOfRecordNotFound: {
            type: 'integer',
            format: 'int32'
        },
        numberOfRecords: {
            type: 'integer',
            format: 'int32',
            xml: {
                attribute: true
            }
        },
        numberOfRecordsNotEditable: {
            type: 'integer',
            format: 'int32'
        },
        numberOfRecordsProcessed: {
            type: 'integer',
            format: 'int32'
        },
        numberOfRecordsUnchanged: {
            type: 'integer',
            format: 'int32'
        },
        numberOfRecordsWithErrors: {
            type: 'integer',
            format: 'int32'
        },
        running: {
            type: 'boolean'
        },
        startIsoDateTime: {
            type: 'string',
            xml: {
                attribute: true
            }
        },
        totalRecords: {
            type: 'integer',
            format: 'int32',
            writeOnly: true
        },
        totalTimeInSeconds: {
            type: 'integer',
            format: 'int64',
            xml: {
                attribute: true
            }
        },
        type: {
            type: 'string',
            xml: {
                attribute: true
            }
        },
        uuid: {
            type: 'string',
            xml: {
                attribute: true
            }
        }
    },
    xml: {
        name: 'report'
    }
} as const;

export const $MetadataReplacementProcessingReport = {
    type: 'object',
    properties: {
        ellapsedTimeInSeconds: {
            type: 'integer',
            format: 'int64',
            xml: {
                attribute: true
            }
        },
        endIsoDateTime: {
            type: 'string',
            xml: {
                attribute: true
            }
        },
        errors: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Report'
            }
        },
        infos: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/InfoReport'
            }
        },
        metadata: {
            uniqueItems: true,
            type: 'array',
            items: {
                type: 'integer',
                format: 'int32'
            }
        },
        metadataChanges: {
            type: 'object',
            additionalProperties: {
                '$ref': '#/components/schemas/ReplaceReport'
            },
            xml: {
                name: 'changes'
            }
        },
        metadataErrors: {
            type: 'object',
            additionalProperties: {
                type: 'array',
                items: {
                    '$ref': '#/components/schemas/Report'
                }
            },
            xml: {
                name: 'errors'
            }
        },
        metadataInfos: {
            type: 'object',
            additionalProperties: {
                type: 'array',
                items: {
                    '$ref': '#/components/schemas/InfoReport'
                }
            },
            xml: {
                name: 'infos'
            }
        },
        noProcessFoundCount: {
            type: 'integer',
            format: 'int32'
        },
        numberOfNullRecords: {
            type: 'integer',
            format: 'int32'
        },
        numberOfRecordNotFound: {
            type: 'integer',
            format: 'int32'
        },
        numberOfRecords: {
            type: 'integer',
            format: 'int32',
            xml: {
                attribute: true
            }
        },
        numberOfRecordsChanged: {
            type: 'integer',
            format: 'int32'
        },
        numberOfRecordsNotChanged: {
            type: 'integer',
            format: 'int32'
        },
        numberOfRecordsNotEditable: {
            type: 'integer',
            format: 'int32'
        },
        numberOfRecordsProcessed: {
            type: 'integer',
            format: 'int32'
        },
        numberOfRecordsUnchanged: {
            type: 'integer',
            format: 'int32'
        },
        numberOfRecordsWithErrors: {
            type: 'integer',
            format: 'int32'
        },
        processId: {
            type: 'string',
            xml: {
                attribute: true,
                name: 'process'
            }
        },
        running: {
            type: 'boolean'
        },
        startIsoDateTime: {
            type: 'string',
            xml: {
                attribute: true
            }
        },
        totalRecords: {
            type: 'integer',
            format: 'int32',
            writeOnly: true
        },
        totalTimeInSeconds: {
            type: 'integer',
            format: 'int64',
            xml: {
                attribute: true
            }
        },
        type: {
            type: 'string',
            xml: {
                attribute: true
            }
        },
        uuid: {
            type: 'string',
            xml: {
                attribute: true
            }
        }
    },
    xml: {
        name: 'report'
    }
} as const;

export const $MetadataResource = {
    type: 'object',
    properties: {
        approved: {
            type: 'boolean'
        },
        filename: {
            type: 'string'
        },
        id: {
            type: 'string'
        },
        lastModification: {
            type: 'string',
            format: 'date-time'
        },
        metadataId: {
            type: 'integer',
            format: 'int32'
        },
        metadataResourceExternalManagementProperties: {
            '$ref': '#/components/schemas/MetadataResourceExternalManagementProperties'
        },
        metadataUuid: {
            type: 'string'
        },
        size: {
            type: 'integer',
            format: 'int64'
        },
        url: {
            type: 'string'
        },
        version: {
            type: 'string'
        },
        visibility: {
            type: 'string',
            enum: ['PUBLIC', 'PRIVATE']
        }
    },
    xml: {
        name: 'resource'
    }
} as const;

export const $MetadataResourceExternalManagementProperties = {
    type: 'object',
    properties: {
        id: {
            type: 'string'
        },
        url: {
            type: 'string'
        },
        validationStatus: {
            type: 'string',
            enum: ['UNKNOWN', 'VALID', 'INCOMPLETE']
        }
    },
    xml: {
        name: 'metadataResourceExternalManagementProperties'
    }
} as const;

export const $MetadataStatusDto = {
    type: 'object',
    properties: {
        changeDate: {
            '$ref': '#/components/schemas/ISODate'
        },
        changeMessage: {
            type: 'string'
        },
        closeDate: {
            '$ref': '#/components/schemas/ISODate'
        },
        currentState: {
            type: 'string'
        },
        dueDate: {
            '$ref': '#/components/schemas/ISODate'
        },
        id: {
            type: 'integer',
            format: 'int32'
        },
        metadataId: {
            type: 'integer',
            format: 'int32'
        },
        owner: {
            type: 'integer',
            format: 'int32'
        },
        previousState: {
            type: 'string'
        },
        relatedMetadataStatusId: {
            type: 'integer',
            format: 'int32'
        },
        statusValue: {
            '$ref': '#/components/schemas/StatusValue'
        },
        titles: {
            type: 'object',
            additionalProperties: {
                type: 'string'
            }
        },
        userId: {
            type: 'integer',
            format: 'int32'
        },
        uuid: {
            type: 'string'
        }
    }
} as const;

export const $MetadataStatusParameter = {
    type: 'object',
    properties: {
        changeMessage: {
            type: 'string'
        },
        closeDate: {
            type: 'string'
        },
        dueDate: {
            type: 'string'
        },
        owner: {
            type: 'integer',
            format: 'int32'
        },
        status: {
            type: 'integer',
            format: 'int32'
        },
        type: {
            type: 'string',
            enum: ['workflow', 'task', 'event']
        }
    },
    description: 'Metadata status'
} as const;

export const $MetadataStatusResponse = {
    type: 'object',
    properties: {
        authorEmail: {
            type: 'string'
        },
        authorName: {
            type: 'string'
        },
        authorProfile: {
            type: 'string'
        },
        changeDate: {
            '$ref': '#/components/schemas/ISODate'
        },
        changeMessage: {
            type: 'string'
        },
        closeDate: {
            '$ref': '#/components/schemas/ISODate'
        },
        currentState: {
            type: 'string'
        },
        currentStateEmpty: {
            type: 'boolean'
        },
        currentStatus: {
            type: 'string'
        },
        dateChange: {
            type: 'string'
        },
        dateClose: {
            type: 'string'
        },
        dateDue: {
            type: 'string'
        },
        dueDate: {
            '$ref': '#/components/schemas/ISODate'
        },
        id: {
            type: 'integer',
            format: 'int32'
        },
        metadataId: {
            type: 'integer',
            format: 'int32'
        },
        owner: {
            type: 'integer',
            format: 'int32'
        },
        ownerEmail: {
            type: 'string'
        },
        ownerName: {
            type: 'string'
        },
        ownerProfile: {
            type: 'string'
        },
        previousState: {
            type: 'string'
        },
        previousStateEmpty: {
            type: 'boolean'
        },
        previousStatus: {
            type: 'string'
        },
        relatedMetadataStatusId: {
            type: 'integer',
            format: 'int32'
        },
        statusId: {
            type: 'integer',
            format: 'int32'
        },
        statusValue: {
            '$ref': '#/components/schemas/StatusValue'
        },
        title: {
            type: 'string'
        },
        titles: {
            type: 'object',
            additionalProperties: {
                type: 'string'
            }
        },
        userId: {
            type: 'integer',
            format: 'int32'
        },
        uuid: {
            type: 'string'
        }
    }
} as const;

export const $MetadataWorkflowStatusResponse = {
    type: 'object',
    properties: {
        currentStatus: {
            '$ref': '#/components/schemas/MetadataStatusDto'
        },
        hasEditPermission: {
            type: 'boolean'
        },
        reviewers: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/User'
            }
        },
        status: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/StatusValue'
            }
        }
    }
} as const;

export const $MultilingualValue = {
    type: 'object',
    properties: {
        value: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/LocalizedString'
            }
        }
    }
} as const;

export const $Online = {
    type: 'object',
    properties: {
        item: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/RelatedLinkItem'
            }
        }
    }
} as const;

export const $Operation = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int32'
        },
        label: {
            type: 'object',
            additionalProperties: {
                type: 'string'
            }
        },
        name: {
            type: 'string'
        },
        reserved: {
            type: 'boolean'
        },
        reservedOperation: {
            type: 'string',
            enum: ['view', 'download', 'editing', 'notify', 'dynamic', 'featured']
        }
    }
} as const;

export const $Option = {
    type: 'object',
    properties: {
        description: {
            type: 'string',
            xml: {
                attribute: true,
                name: 'title'
            }
        },
        isDefault: {
            type: 'boolean',
            xml: {
                attribute: true,
                name: 'default'
            }
        },
        label: {
            type: 'string'
        },
        value: {
            type: 'string',
            xml: {
                attribute: true
            }
        }
    },
    xml: {
        name: 'option'
    }
} as const;

export const $OwnerResponse = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int32'
        },
        name: {
            type: 'string'
        },
        records: {
            type: 'integer',
            format: 'int64'
        }
    }
} as const;

export const $PageLink = {
    type: 'object',
    properties: {
        content: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Link'
            }
        },
        empty: {
            type: 'boolean'
        },
        first: {
            type: 'boolean'
        },
        last: {
            type: 'boolean'
        },
        number: {
            type: 'integer',
            format: 'int32'
        },
        numberOfElements: {
            type: 'integer',
            format: 'int32'
        },
        pageable: {
            '$ref': '#/components/schemas/PageableObject'
        },
        size: {
            type: 'integer',
            format: 'int32'
        },
        sort: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SortObject'
            }
        },
        totalElements: {
            type: 'integer',
            format: 'int64'
        },
        totalPages: {
            type: 'integer',
            format: 'int32'
        }
    }
} as const;

export const $PageProperties = {
    type: 'object',
    properties: {
        content: {
            type: 'string'
        },
        format: {
            type: 'string',
            enum: ['LINK', 'HTML', 'HTMLPAGE', 'TEXT']
        },
        icon: {
            type: 'string'
        },
        label: {
            type: 'string'
        },
        language: {
            type: 'string'
        },
        link: {
            type: 'string'
        },
        pageId: {
            type: 'string'
        },
        sections: {
            type: 'array',
            items: {
                type: 'string',
                enum: ['TOP', 'FOOTER', 'MENU', 'SUBMENU', 'CUSTOM_MENU1', 'CUSTOM_MENU2', 'CUSTOM_MENU3']
            }
        },
        status: {
            type: 'string',
            enum: ['PUBLIC', 'PUBLIC_ONLY', 'PRIVATE', 'HIDDEN']
        }
    }
} as const;

export const $PageableObject = {
    type: 'object',
    properties: {
        offset: {
            type: 'integer',
            format: 'int64'
        },
        pageNumber: {
            type: 'integer',
            format: 'int32'
        },
        pageSize: {
            type: 'integer',
            format: 'int32'
        },
        paged: {
            type: 'boolean'
        },
        sort: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SortObject'
            }
        },
        unpaged: {
            type: 'boolean'
        }
    }
} as const;

export const $PaginatedUserSearchResponse = {
    type: 'object',
    properties: {
        rows: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/UserSearchDto'
            }
        },
        total: {
            type: 'integer',
            format: 'int64'
        }
    }
} as const;

export const $Parent = {
    type: 'object',
    properties: {
        item: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/RelatedMetadataItem'
            }
        }
    }
} as const;

export const $PasswordResetDto = {
    type: 'object',
    properties: {
        password: {
            type: 'string'
        },
        password2: {
            type: 'string'
        },
        passwordOld: {
            type: 'string'
        }
    }
} as const;

export const $PasswordUpdateParameter = {
    type: 'object',
    properties: {
        changeKey: {
            type: 'string'
        },
        password: {
            type: 'string'
        }
    },
    description: 'The new password and a valid change key'
} as const;

export const $Pattern = {
    required: ['rules', 'title'],
    type: 'object',
    properties: {
        rules: {
            '$ref': '#/components/schemas/Rules'
        },
        title: {
            type: 'string'
        }
    },
    xml: {
        name: 'pattern'
    }
} as const;

export const $Patterns = {
    required: ['pattern'],
    type: 'object',
    properties: {
        pattern: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Pattern'
            }
        }
    },
    xml: {
        name: 'patterns'
    }
} as const;

export const $ProcessingReport = {
    type: 'object',
    properties: {
        ellapsedTimeInSeconds: {
            type: 'integer',
            format: 'int64',
            xml: {
                attribute: true
            }
        },
        endIsoDateTime: {
            type: 'string',
            xml: {
                attribute: true
            }
        },
        errors: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Report'
            }
        },
        infos: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/InfoReport'
            }
        },
        running: {
            type: 'boolean'
        },
        startIsoDateTime: {
            type: 'string',
            xml: {
                attribute: true
            }
        },
        totalTimeInSeconds: {
            type: 'integer',
            format: 'int64',
            xml: {
                attribute: true
            }
        },
        type: {
            type: 'string',
            xml: {
                attribute: true
            }
        },
        uuid: {
            type: 'string',
            xml: {
                attribute: true
            }
        }
    },
    xml: {
        name: 'report'
    }
} as const;

export const $ProxyConfiguration = {
    type: 'object',
    properties: {
        enabled: {
            type: 'boolean'
        },
        host: {
            type: 'string'
        },
        ignoreHostList: {
            type: 'string'
        },
        password: {
            type: 'string'
        },
        port: {
            type: 'string'
        },
        proxyConfiguredInSystemProperties: {
            type: 'boolean'
        },
        username: {
            type: 'string'
        }
    }
} as const;

export const $PublicationOption = {
    type: 'object',
    properties: {
        additionalPublications: {
            type: 'object',
            additionalProperties: {
                type: 'array',
                items: {
                    '$ref': '#/components/schemas/ReservedOperation'
                }
            }
        },
        name: {
            type: 'string'
        },
        publicationGroup: {
            '$ref': '#/components/schemas/ReservedGroup'
        },
        publicationOperations: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ReservedOperation'
            }
        }
    }
} as const;

export const $RatingAverage = {
    type: 'object',
    properties: {
        lastComment: {
            type: 'string'
        },
        ratingAverages: {
            type: 'object',
            additionalProperties: {
                type: 'integer',
                format: 'int32'
            }
        },
        ratingCount: {
            type: 'integer',
            format: 'int32'
        },
        userfeedbackCount: {
            type: 'integer',
            format: 'int32'
        }
    }
} as const;

export const $RatingCriteria = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int32'
        },
        internal: {
            type: 'boolean'
        },
        label: {
            type: 'object',
            additionalProperties: {
                type: 'string'
            }
        },
        name: {
            type: 'string'
        }
    }
} as const;

export const $RegionResponse = {
    type: 'object',
    properties: {
        categoryId: {
            type: 'string',
            xml: {
                attribute: true
            }
        },
        east: {
            type: 'number',
            format: 'double'
        },
        hasGeom: {
            type: 'boolean',
            xml: {
                attribute: true
            }
        },
        id: {
            type: 'string',
            xml: {
                attribute: true
            }
        },
        label: {
            type: 'object',
            additionalProperties: {
                type: 'string'
            }
        },
        north: {
            type: 'number',
            format: 'double'
        },
        south: {
            type: 'number',
            format: 'double'
        },
        west: {
            type: 'number',
            format: 'double'
        }
    }
} as const;

export const $Related = {
    type: 'object',
    properties: {
        item: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/RelatedMetadataItem'
            }
        }
    }
} as const;

export const $RelatedItemType = {
    type: 'string',
    enum: ['children', 'parent', 'brothersAndSisters', 'siblings', 'associated', 'services', 'datasets', 'fcats', 'hasfeaturecats', 'sources', 'hassources', 'related', 'onlines', 'thumbnails']
} as const;

export const $RelatedLinkItem = {
    required: ['description', 'title'],
    type: 'object',
    properties: {
        applicationProfile: {
            type: 'string'
        },
        description: {
            '$ref': '#/components/schemas/Description'
        },
        function: {
            type: 'string'
        },
        hash: {
            type: 'string'
        },
        id: {
            type: 'string'
        },
        idx: {
            type: 'string'
        },
        mimeType: {
            type: 'string'
        },
        protocol: {
            type: 'string'
        },
        title: {
            '$ref': '#/components/schemas/MultilingualValue'
        },
        type: {
            type: 'string'
        },
        url: {
            '$ref': '#/components/schemas/MultilingualValue'
        }
    }
} as const;

export const $RelatedMetadataItem = {
    required: ['description', 'mdType', 'title'],
    type: 'object',
    properties: {
        description: {
            '$ref': '#/components/schemas/Description'
        },
        hash: {
            type: 'string'
        },
        id: {
            type: 'string'
        },
        idx: {
            type: 'string'
        },
        mdType: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        origin: {
            type: 'string'
        },
        title: {
            '$ref': '#/components/schemas/MultilingualValue'
        },
        type: {
            type: 'string'
        },
        url: {
            '$ref': '#/components/schemas/MultilingualValue'
        }
    }
} as const;

export const $RelatedResponse = {
    type: 'object',
    properties: {
        associated: {
            '$ref': '#/components/schemas/Associated'
        },
        children: {
            '$ref': '#/components/schemas/Children'
        },
        datasets: {
            '$ref': '#/components/schemas/Dataset'
        },
        fcats: {
            '$ref': '#/components/schemas/Fcat'
        },
        hasfeaturecats: {
            '$ref': '#/components/schemas/Hasfeaturecats'
        },
        hassources: {
            '$ref': '#/components/schemas/Hassource'
        },
        onlines: {
            '$ref': '#/components/schemas/Online'
        },
        parent: {
            '$ref': '#/components/schemas/Parent'
        },
        related: {
            '$ref': '#/components/schemas/Related'
        },
        services: {
            '$ref': '#/components/schemas/Service'
        },
        siblings: {
            '$ref': '#/components/schemas/Siblings'
        },
        sources: {
            '$ref': '#/components/schemas/RelatedSource'
        },
        thumbnails: {
            '$ref': '#/components/schemas/Thumbnail'
        }
    },
    xml: {
        name: 'related'
    }
} as const;

export const $RelatedSiblingMetadataItem = {
    required: ['associationType', 'description', 'initiativeType', 'mdType', 'title'],
    type: 'object',
    properties: {
        associationType: {
            type: 'string'
        },
        description: {
            '$ref': '#/components/schemas/Description'
        },
        hash: {
            type: 'string'
        },
        id: {
            type: 'string'
        },
        idx: {
            type: 'string'
        },
        initiativeType: {
            type: 'string'
        },
        mdType: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        origin: {
            type: 'string'
        },
        title: {
            '$ref': '#/components/schemas/MultilingualValue'
        },
        type: {
            type: 'string'
        },
        url: {
            '$ref': '#/components/schemas/MultilingualValue'
        }
    }
} as const;

export const $RelatedSource = {
    type: 'object',
    properties: {
        item: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/RelatedMetadataItem'
            }
        }
    }
} as const;

export const $RelatedThumbnailItem = {
    required: ['title'],
    type: 'object',
    properties: {
        hash: {
            type: 'string'
        },
        id: {
            type: 'string'
        },
        idx: {
            type: 'string'
        },
        title: {
            '$ref': '#/components/schemas/MultilingualValue'
        },
        type: {
            type: 'string'
        },
        url: {
            '$ref': '#/components/schemas/MultilingualValue'
        }
    }
} as const;

export const $ReplaceEntryChange = {
    type: 'object',
    properties: {
        changedVal: {
            type: 'string'
        },
        fieldId: {
            type: 'string'
        },
        originalVal: {
            type: 'string'
        }
    }
} as const;

export const $ReplaceReport = {
    type: 'object',
    properties: {
        approved: {
            type: 'boolean'
        },
        date: {
            type: 'string',
            xml: {
                name: 'datetime'
            }
        },
        draft: {
            type: 'boolean'
        },
        elementChanges: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ReplaceEntryChange'
            }
        },
        message: {
            type: 'string'
        },
        uuid: {
            type: 'string'
        }
    }
} as const;

export const $Report = {
    type: 'object',
    properties: {
        approved: {
            type: 'boolean'
        },
        date: {
            type: 'string',
            xml: {
                name: 'datetime'
            }
        },
        draft: {
            type: 'boolean'
        },
        message: {
            type: 'string'
        },
        uuid: {
            type: 'string'
        }
    }
} as const;

export const $Reports = {
    type: 'object',
    properties: {
        report: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ValidationReport'
            }
        }
    },
    xml: {
        name: 'reports'
    }
} as const;

export const $ReservedGroup = {
    type: 'string',
    enum: ['all', 'intranet', 'guest']
} as const;

export const $ReservedOperation = {
    type: 'string',
    enum: ['view', 'download', 'editing', 'notify', 'dynamic', 'featured']
} as const;

export const $Rule = {
    required: ['details'],
    type: 'object',
    properties: {
        details: {
            type: 'string'
        },
        group: {
            type: 'string',
            xml: {
                attribute: true
            }
        },
        id: {
            type: 'string',
            xml: {
                attribute: true
            }
        },
        msg: {
            type: 'string'
        },
        ref: {
            type: 'string',
            xml: {
                attribute: true
            }
        },
        test: {
            type: 'string'
        },
        type: {
            type: 'string',
            xml: {
                attribute: true
            }
        }
    },
    xml: {
        name: 'rule'
    }
} as const;

export const $Rules = {
    type: 'object',
    properties: {
        rule: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Rule'
            }
        }
    },
    xml: {
        name: 'rules'
    }
} as const;

export const $SavedQuery = {
    type: 'object',
    properties: {
        cleanValues: {
            type: 'string'
        },
        id: {
            type: 'string'
        },
        label: {
            type: 'string'
        },
        parameters: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        xpath: {
            type: 'string'
        }
    }
} as const;

export const $Section = {
    required: ['field'],
    type: 'object',
    properties: {
        field: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Field'
            }
        },
        name: {
            type: 'string',
            xml: {
                attribute: true
            }
        }
    }
} as const;

export const $Selection = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int32'
        },
        label: {
            type: 'object',
            additionalProperties: {
                type: 'string'
            }
        },
        name: {
            type: 'string'
        },
        watchable: {
            type: 'boolean'
        }
    }
} as const;

export const $Service = {
    type: 'object',
    properties: {
        item: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/RelatedMetadataItem'
            }
        }
    }
} as const;

export const $Setting = {
    type: 'object',
    properties: {
        dataType: {
            type: 'string',
            enum: ['STRING', 'INT', 'BOOLEAN', 'JSON']
        },
        editable: {
            type: 'boolean'
        },
        editable_JpaWorkaround: {
            type: 'string',
            writeOnly: true
        },
        encrypted: {
            type: 'boolean'
        },
        encrypted_JpaWorkaround: {
            type: 'string',
            writeOnly: true
        },
        internal: {
            type: 'boolean'
        },
        internal_JpaWorkaround: {
            type: 'string',
            writeOnly: true
        },
        name: {
            type: 'string'
        },
        position: {
            type: 'integer',
            format: 'int32'
        },
        storedValue: {
            type: 'string'
        },
        value: {
            type: 'string'
        }
    }
} as const;

export const $SettingsListResponse = {
    type: 'object',
    properties: {
        settings: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Setting'
            }
        }
    }
} as const;

export const $SharingParameter = {
    type: 'object',
    properties: {
        clear: {
            type: 'boolean'
        },
        privileges: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GroupOperations'
            }
        }
    },
    description: 'Privileges'
} as const;

export const $SharingResponse = {
    type: 'object',
    properties: {
        groupOwner: {
            type: 'string'
        },
        owner: {
            type: 'string'
        },
        privileges: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GroupPrivilege'
            }
        }
    }
} as const;

export const $Siblings = {
    type: 'object',
    properties: {
        item: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/RelatedSiblingMetadataItem'
            }
        }
    }
} as const;

export const $SimpleMetadataProcessingReport = {
    type: 'object',
    properties: {
        ellapsedTimeInSeconds: {
            type: 'integer',
            format: 'int64',
            xml: {
                attribute: true
            }
        },
        endIsoDateTime: {
            type: 'string',
            xml: {
                attribute: true
            }
        },
        errors: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Report'
            }
        },
        infos: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/InfoReport'
            }
        },
        metadata: {
            uniqueItems: true,
            type: 'array',
            items: {
                type: 'integer',
                format: 'int32'
            }
        },
        metadataErrors: {
            type: 'object',
            additionalProperties: {
                type: 'array',
                items: {
                    '$ref': '#/components/schemas/Report'
                }
            },
            xml: {
                name: 'errors'
            }
        },
        metadataInfos: {
            type: 'object',
            additionalProperties: {
                type: 'array',
                items: {
                    '$ref': '#/components/schemas/InfoReport'
                }
            },
            xml: {
                name: 'infos'
            }
        },
        numberOfNullRecords: {
            type: 'integer',
            format: 'int32'
        },
        numberOfRecordNotFound: {
            type: 'integer',
            format: 'int32'
        },
        numberOfRecords: {
            type: 'integer',
            format: 'int32',
            xml: {
                attribute: true
            }
        },
        numberOfRecordsNotEditable: {
            type: 'integer',
            format: 'int32'
        },
        numberOfRecordsProcessed: {
            type: 'integer',
            format: 'int32'
        },
        numberOfRecordsUnchanged: {
            type: 'integer',
            format: 'int32'
        },
        numberOfRecordsWithErrors: {
            type: 'integer',
            format: 'int32'
        },
        running: {
            type: 'boolean'
        },
        startIsoDateTime: {
            type: 'string',
            xml: {
                attribute: true
            }
        },
        totalRecords: {
            type: 'integer',
            format: 'int32',
            writeOnly: true
        },
        totalTimeInSeconds: {
            type: 'integer',
            format: 'int64',
            xml: {
                attribute: true
            }
        },
        type: {
            type: 'string',
            xml: {
                attribute: true
            }
        },
        uuid: {
            type: 'string',
            xml: {
                attribute: true
            }
        }
    },
    xml: {
        name: 'report'
    }
} as const;

export const $SiteInformation = {
    type: 'object',
    properties: {
        catalogue: {
            type: 'object',
            additionalProperties: {
                type: 'string'
            }
        },
        database: {
            type: 'object',
            additionalProperties: {
                type: 'string'
            }
        },
        env: {
            type: 'object',
            additionalProperties: {
                type: 'string'
            }
        },
        index: {
            type: 'object',
            additionalProperties: {
                type: 'string'
            }
        },
        main: {
            type: 'object',
            additionalProperties: {
                type: 'string'
            }
        },
        version: {
            type: 'object',
            additionalProperties: {
                type: 'string'
            }
        }
    }
} as const;

export const $SortObject = {
    type: 'object',
    properties: {
        ascending: {
            type: 'boolean'
        },
        direction: {
            type: 'string'
        },
        ignoreCase: {
            type: 'boolean'
        },
        nullHandling: {
            type: 'string'
        },
        property: {
            type: 'string'
        }
    }
} as const;

export const $Source = {
    type: 'object',
    properties: {
        creationDate: {
            '$ref': '#/components/schemas/ISODate'
        },
        filter: {
            type: 'string'
        },
        groupOwner: {
            type: 'integer',
            format: 'int32'
        },
        label: {
            type: 'object',
            additionalProperties: {
                type: 'string'
            }
        },
        listableInHeaderSelector: {
            type: 'boolean'
        },
        logo: {
            type: 'string'
        },
        name: {
            type: 'string'
        },
        serviceRecord: {
            type: 'string'
        },
        type: {
            type: 'string',
            enum: ['portal', 'subportal', 'externalportal', 'harvester']
        },
        uiConfig: {
            type: 'string'
        },
        uuid: {
            type: 'string'
        }
    }
} as const;

export const $Status = {
    type: 'object',
    properties: {
        date: {
            type: 'string',
            format: 'date-time'
        },
        id: {
            type: 'string'
        },
        message: {
            type: 'string'
        },
        state: {
            type: 'string',
            enum: ['RED', 'UNINITIALIZED', 'YELLOW', 'GREEN', 'DISABLED']
        }
    }
} as const;

export const $StatusValue = {
    type: 'object',
    properties: {
        displayOrder: {
            type: 'integer',
            format: 'int32'
        },
        id: {
            type: 'integer',
            format: 'int32'
        },
        label: {
            type: 'object',
            additionalProperties: {
                type: 'string'
            }
        },
        name: {
            type: 'string'
        },
        notificationLevel: {
            type: 'string',
            enum: ['statusUserOwner', 'catalogueAdministrator', 'catalogueProfileAdministrator', 'catalogueProfileUserAdmin', 'catalogueProfileReviewer', 'catalogueProfileEditor', 'catalogueProfileRegisteredUser', 'catalogueProfileGuest', 'recordProfileReviewer', 'recordUserAuthor', 'recordGroupEmail']
        },
        reserved: {
            type: 'boolean'
        },
        reserved_JpaWorkaround: {
            type: 'string',
            writeOnly: true
        },
        type: {
            type: 'string',
            enum: ['workflow', 'task', 'event']
        }
    }
} as const;

export const $SuggestionType = {
    required: ['name', 'operational'],
    type: 'object',
    properties: {
        category: {
            type: 'string',
            xml: {
                attribute: true
            }
        },
        id: {
            type: 'string',
            xml: {
                attribute: true
            }
        },
        name: {
            type: 'string'
        },
        operational: {
            type: 'string'
        },
        params: {
            type: 'string'
        },
        process: {
            type: 'string',
            xml: {
                attribute: true
            }
        },
        target: {
            type: 'string',
            xml: {
                attribute: true
            }
        }
    }
} as const;

export const $SystemInfo = {
    type: 'object',
    properties: {
        buildDate: {
            type: 'string'
        },
        buildJavaVendor: {
            type: 'string'
        },
        buildJavaVersion: {
            type: 'string'
        },
        buildOsInfo: {
            type: 'string'
        },
        devMode: {
            type: 'boolean'
        },
        scmRevision: {
            type: 'string'
        },
        scmUrl: {
            type: 'string'
        },
        stagingProfile: {
            type: 'string'
        },
        subVersion: {
            type: 'string'
        },
        version: {
            type: 'string'
        }
    }
} as const;

export const $ThesaurusInfo = {
    type: 'object',
    properties: {
        defaultNamespace: {
            type: 'string'
        },
        description: {
            type: 'string'
        },
        dname: {
            type: 'string'
        },
        filename: {
            type: 'string'
        },
        multilingualDescriptions: {
            type: 'object',
            additionalProperties: {
                type: 'string'
            }
        },
        multilingualTitles: {
            type: 'object',
            additionalProperties: {
                type: 'string'
            }
        },
        title: {
            type: 'string'
        },
        type: {
            type: 'string'
        }
    },
    description: 'Thesaurus information'
} as const;

export const $Thumbnail = {
    type: 'object',
    properties: {
        item: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/RelatedThumbnailItem'
            }
        }
    }
} as const;

export const $TransferRequest = {
    type: 'object',
    properties: {
        sourceGroup: {
            type: 'integer',
            format: 'int32'
        },
        sourceUser: {
            type: 'integer',
            format: 'int32'
        },
        targetGroup: {
            type: 'integer',
            format: 'int32'
        },
        targetUser: {
            type: 'integer',
            format: 'int32'
        }
    }
} as const;

export const $Translations = {
    type: 'object',
    properties: {
        fieldName: {
            type: 'string'
        },
        id: {
            type: 'integer',
            format: 'int32'
        },
        langId: {
            type: 'string'
        },
        value: {
            type: 'string'
        }
    }
} as const;

export const $UiSetting = {
    type: 'object',
    properties: {
        configuration: {
            type: 'string'
        },
        id: {
            type: 'string'
        }
    }
} as const;

export const $User = {
    type: 'object',
    properties: {
        accountNonExpired: {
            type: 'boolean'
        },
        accountNonLocked: {
            type: 'boolean'
        },
        addresses: {
            uniqueItems: true,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Address'
            }
        },
        authorities: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GrantedAuthority'
            }
        },
        credentialsNonExpired: {
            type: 'boolean'
        },
        email: {
            type: 'string'
        },
        emailAddresses: {
            uniqueItems: true,
            type: 'array',
            items: {
                type: 'string'
            }
        },
        enabled: {
            type: 'boolean'
        },
        id: {
            type: 'integer',
            format: 'int32'
        },
        kind: {
            type: 'string'
        },
        lastLoginDate: {
            type: 'string'
        },
        name: {
            type: 'string'
        },
        organisation: {
            type: 'string'
        },
        primaryAddress: {
            '$ref': '#/components/schemas/Address'
        },
        profile: {
            type: 'string',
            enum: ['Administrator', 'UserAdmin', 'Reviewer', 'Editor', 'RegisteredUser', 'Guest', 'Monitor']
        },
        security: {
            '$ref': '#/components/schemas/UserSecurity'
        },
        surname: {
            type: 'string'
        },
        username: {
            type: 'string'
        }
    }
} as const;

export const $UserDto = {
    type: 'object',
    properties: {
        addresses: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Address'
            }
        },
        email: {
            '$ref': '#/components/schemas/UserDto'
        },
        emailAddresses: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        enabled: {
            type: 'boolean'
        },
        groupsEditor: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        groupsRegisteredUser: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        groupsReviewer: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        groupsUserAdmin: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        id: {
            type: 'string'
        },
        kind: {
            type: 'string'
        },
        name: {
            type: 'string'
        },
        organisation: {
            type: 'string'
        },
        password: {
            type: 'string'
        },
        profile: {
            type: 'string'
        },
        surname: {
            type: 'string'
        },
        username: {
            type: 'string'
        }
    }
} as const;

export const $UserFeedbackDTO = {
    type: 'object',
    properties: {
        approverName: {
            type: 'string'
        },
        authorEmail: {
            type: 'string'
        },
        authorName: {
            type: 'string'
        },
        authorOrganization: {
            type: 'string'
        },
        authorUserId: {
            type: 'integer',
            format: 'int32'
        },
        captcha: {
            type: 'string'
        },
        comment: {
            type: 'string'
        },
        date: {
            type: 'string'
        },
        keywords: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        metadataTitle: {
            type: 'string'
        },
        metadataUUID: {
            type: 'string'
        },
        optionPrivacy: {
            type: 'boolean'
        },
        parentUuid: {
            type: 'string'
        },
        published: {
            type: 'boolean'
        },
        rating: {
            type: 'object',
            additionalProperties: {
                type: 'integer',
                format: 'int32'
            }
        },
        ratingAVG: {
            type: 'integer',
            format: 'int32'
        },
        showApproveButton: {
            type: 'boolean'
        },
        uuid: {
            type: 'string'
        }
    }
} as const;

export const $UserGroup = {
    type: 'object',
    properties: {
        group: {
            '$ref': '#/components/schemas/Group'
        },
        id: {
            '$ref': '#/components/schemas/UserGroupId'
        },
        profile: {
            type: 'string',
            enum: ['Administrator', 'UserAdmin', 'Reviewer', 'Editor', 'RegisteredUser', 'Guest', 'Monitor']
        },
        user: {
            '$ref': '#/components/schemas/User'
        }
    }
} as const;

export const $UserGroupId = {
    type: 'object',
    properties: {
        groupId: {
            type: 'integer',
            format: 'int32'
        },
        profile: {
            type: 'string',
            enum: ['Administrator', 'UserAdmin', 'Reviewer', 'Editor', 'RegisteredUser', 'Guest', 'Monitor']
        },
        userId: {
            type: 'integer',
            format: 'int32'
        }
    }
} as const;

export const $UserGroupsResponse = {
    type: 'object',
    properties: {
        groupId: {
            type: 'integer',
            format: 'int32'
        },
        groupName: {
            type: 'string'
        },
        userId: {
            type: 'integer',
            format: 'int32'
        },
        userName: {
            type: 'string'
        },
        userProfile: {
            type: 'string'
        }
    }
} as const;

export const $UserRegisterDto = {
    type: 'object',
    properties: {
        address: {
            '$ref': '#/components/schemas/Address'
        },
        captcha: {
            type: 'string'
        },
        email: {
            type: 'string'
        },
        name: {
            type: 'string'
        },
        organisation: {
            type: 'string'
        },
        profile: {
            type: 'string'
        },
        surname: {
            type: 'string'
        },
        username: {
            type: 'string'
        }
    },
    description: 'User details'
} as const;

export const $UserSearchDto = {
    type: 'object',
    properties: {
        creationDate: {
            type: 'string'
        },
        creator: {
            type: 'string'
        },
        creatorId: {
            type: 'integer',
            format: 'int32'
        },
        featuredType: {
            type: 'string'
        },
        groups: {
            type: 'array',
            items: {
                type: 'integer',
                format: 'int32'
            }
        },
        id: {
            type: 'integer',
            format: 'int32'
        },
        logo: {
            type: 'string'
        },
        names: {
            type: 'object',
            additionalProperties: {
                type: 'string'
            }
        },
        url: {
            type: 'string'
        }
    },
    description: 'User search details'
} as const;

export const $UserSecurity = {
    type: 'object',
    properties: {
        authType: {
            type: 'string'
        },
        nodeId: {
            type: 'string'
        },
        securityNotifications: {
            uniqueItems: true,
            type: 'array',
            items: {
                type: 'string',
                enum: ['UPDATE_HASH_REQUIRED', 'UNKNOWN']
            }
        },
        securityNotificationsString: {
            '$ref': '#/components/schemas/UserSecurity'
        }
    }
} as const;

export const $ValidationReport = {
    required: ['displayPriority', 'error', 'id', 'label', 'patterns', 'requirement', 'success', 'total'],
    type: 'object',
    properties: {
        displayPriority: {
            type: 'integer'
        },
        error: {
            type: 'integer'
        },
        id: {
            type: 'string'
        },
        label: {
            type: 'string'
        },
        patterns: {
            '$ref': '#/components/schemas/Patterns'
        },
        requirement: {
            type: 'string'
        },
        schematronVerificationError: {
            type: 'string'
        },
        success: {
            type: 'string'
        },
        total: {
            type: 'string'
        }
    },
    xml: {
        name: 'report'
    }
} as const;

export const $Values = {
    type: 'object',
    properties: {
        code: {
            type: 'string'
        },
        definition: {
            type: 'string'
        },
        label: {
            type: 'string'
        }
    }
} as const;

export const $XsltMetadataProcessingReport = {
    type: 'object',
    properties: {
        ellapsedTimeInSeconds: {
            type: 'integer',
            format: 'int64',
            xml: {
                attribute: true
            }
        },
        endIsoDateTime: {
            type: 'string',
            xml: {
                attribute: true
            }
        },
        errors: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Report'
            }
        },
        infos: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/InfoReport'
            }
        },
        metadata: {
            uniqueItems: true,
            type: 'array',
            items: {
                type: 'integer',
                format: 'int32'
            }
        },
        metadataErrors: {
            type: 'object',
            additionalProperties: {
                type: 'array',
                items: {
                    '$ref': '#/components/schemas/Report'
                }
            },
            xml: {
                name: 'errors'
            }
        },
        metadataInfos: {
            type: 'object',
            additionalProperties: {
                type: 'array',
                items: {
                    '$ref': '#/components/schemas/InfoReport'
                }
            },
            xml: {
                name: 'infos'
            }
        },
        noProcessFoundCount: {
            type: 'integer',
            format: 'int32'
        },
        numberOfNullRecords: {
            type: 'integer',
            format: 'int32'
        },
        numberOfRecordNotFound: {
            type: 'integer',
            format: 'int32'
        },
        numberOfRecords: {
            type: 'integer',
            format: 'int32',
            xml: {
                attribute: true
            }
        },
        numberOfRecordsNotEditable: {
            type: 'integer',
            format: 'int32'
        },
        numberOfRecordsProcessed: {
            type: 'integer',
            format: 'int32'
        },
        numberOfRecordsUnchanged: {
            type: 'integer',
            format: 'int32'
        },
        numberOfRecordsWithErrors: {
            type: 'integer',
            format: 'int32'
        },
        processId: {
            type: 'string',
            xml: {
                attribute: true,
                name: 'process'
            }
        },
        running: {
            type: 'boolean'
        },
        startIsoDateTime: {
            type: 'string',
            xml: {
                attribute: true
            }
        },
        totalRecords: {
            type: 'integer',
            format: 'int32',
            writeOnly: true
        },
        totalTimeInSeconds: {
            type: 'integer',
            format: 'int64',
            xml: {
                attribute: true
            }
        },
        type: {
            type: 'string',
            xml: {
                attribute: true
            }
        },
        uuid: {
            type: 'string',
            xml: {
                attribute: true
            }
        }
    },
    xml: {
        name: 'report'
    }
} as const;